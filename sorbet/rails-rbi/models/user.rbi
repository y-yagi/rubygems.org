# This is an autogenerated file for dynamic methods in User
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class User::ActiveRecord_Relation < ActiveRecord::Relation
  include User::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include User::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend User::ModelRelationShared
  include User::InstanceMethods
  Elem = type_template(fixed: User)
end

module User::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(String)) }
  def api_key(); end

  sig { params(value: T.nilable(String)).void }
  def api_key=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def api_key?(*args); end

  sig { returns(T.nilable(String)) }
  def confirmation_token(); end

  sig { params(value: T.nilable(String)).void }
  def confirmation_token=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def confirmation_token?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def created_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(String)) }
  def email(); end

  sig { params(value: T.nilable(String)).void }
  def email=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def email?(*args); end

  sig { returns(T::Boolean) }
  def email_confirmed(); end

  sig { params(value: T::Boolean).void }
  def email_confirmed=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def email_confirmed?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def email_reset(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def email_reset=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def email_reset?(*args); end

  sig { returns(T.nilable(String)) }
  def encrypted_password(); end

  sig { params(value: T.nilable(String)).void }
  def encrypted_password=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def encrypted_password?(*args); end

  sig { returns(T.nilable(String)) }
  def handle(); end

  sig { params(value: T.nilable(String)).void }
  def handle=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def handle?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def hide_email(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def hide_email=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def hide_email?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(String) }
  def mfa_level(); end

  sig { params(value: T.nilable(T.any(Integer, String, Symbol))).void }
  def mfa_level=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def mfa_level?(*args); end

  sig { returns(T.nilable(T::Array[T.untyped])) }
  def mfa_recovery_codes(); end

  sig { params(value: T.nilable(T::Array[T.untyped])).void }
  def mfa_recovery_codes=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def mfa_recovery_codes?(*args); end

  sig { returns(T.nilable(String)) }
  def mfa_seed(); end

  sig { params(value: T.nilable(String)).void }
  def mfa_seed=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def mfa_seed?(*args); end

  sig { returns(T.nilable(String)) }
  def remember_token(); end

  sig { params(value: T.nilable(String)).void }
  def remember_token=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def remember_token?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def remember_token_expires_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def remember_token_expires_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def remember_token_expires_at?(*args); end

  sig { returns(T.nilable(String)) }
  def salt(); end

  sig { params(value: T.nilable(String)).void }
  def salt=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def salt?(*args); end

  sig { returns(T.nilable(String)) }
  def token(); end

  sig { params(value: T.nilable(String)).void }
  def token=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def token?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def token_expires_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def token_expires_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def token_expires_at?(*args); end

  sig { returns(T.nilable(String)) }
  def twitter_username(); end

  sig { params(value: T.nilable(String)).void }
  def twitter_username=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def twitter_username?(*args); end

  sig { returns(T.nilable(String)) }
  def unconfirmed_email(); end

  sig { params(value: T.nilable(String)).void }
  def unconfirmed_email=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def unconfirmed_email?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def updated_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class User
  extend T::Sig

  sig { returns(::Deletion::ActiveRecord_Associations_CollectionProxy) }
  def deletions(); end

  sig { params(value: T.any(T::Array[::Deletion], ::Deletion::ActiveRecord_Associations_CollectionProxy)).void }
  def deletions=(value); end

  sig { returns(::Ownership::ActiveRecord_Associations_CollectionProxy) }
  def ownerships(); end

  sig { params(value: T.any(T::Array[::Ownership], ::Ownership::ActiveRecord_Associations_CollectionProxy)).void }
  def ownerships=(value); end

  sig { returns(::Rubygem::ActiveRecord_Associations_CollectionProxy) }
  def rubygems(); end

  sig { params(value: T.any(T::Array[::Rubygem], ::Rubygem::ActiveRecord_Associations_CollectionProxy)).void }
  def rubygems=(value); end

  sig { returns(::Rubygem::ActiveRecord_Associations_CollectionProxy) }
  def subscribed_gems(); end

  sig { params(value: T.any(T::Array[::Rubygem], ::Rubygem::ActiveRecord_Associations_CollectionProxy)).void }
  def subscribed_gems=(value); end

  sig { returns(::Subscription::ActiveRecord_Associations_CollectionProxy) }
  def subscriptions(); end

  sig { params(value: T.any(T::Array[::Subscription], ::Subscription::ActiveRecord_Associations_CollectionProxy)).void }
  def subscriptions=(value); end

  sig { returns(::WebHook::ActiveRecord_Associations_CollectionProxy) }
  def web_hooks(); end

  sig { params(value: T.any(T::Array[::WebHook], ::WebHook::ActiveRecord_Associations_CollectionProxy)).void }
  def web_hooks=(value); end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.mfa_levels(); end

end

module User::ModelRelationShared
  extend T::Sig

  sig { returns(User::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def mfa_disabled(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def mfa_ui_and_api(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def mfa_ui_only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def except(*args, &block); end

end
