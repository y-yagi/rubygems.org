# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/roadie/all/roadie.rbi
#
# roadie-3.5.0
class Roadie::InvalidUrlPath < Roadie::Error
  def cause; end
  def initialize(given_path, cause = nil); end
end
class Roadie::CssNotFound < Roadie::Error
  def build_message(extra_message = nil); end
  def css_name; end
  def error_row; end
  def extra_message; end
  def initialize(css_name, extra_message = nil, provider = nil); end
  def provider; end
end
class Roadie::ProvidersFailed < Roadie::CssNotFound
  def build_message(extra_message); end
  def each_error_row(errors); end
  def errors; end
  def initialize(css_name, provider_list, errors); end
end
module Roadie::Utils
  def path_is_absolute?(path); end
  def self.path_is_absolute?(path); end
  def self.warn(message); end
  def warn(message); end
end
class Roadie::Deduplicator
  def apply; end
  def calculate_latest_occurance; end
  def has_duplicates?; end
  def initialize(input); end
  def input; end
  def latest_occurance; end
  def self.apply(input); end
  def strip_out_duplicates; end
end
class Roadie::Stylesheet
  def blocks; end
  def create_style_block(selector_string, rule_set, media_types); end
  def each_inlinable_block(&block); end
  def initialize(name, css); end
  def inlinable_blocks; end
  def name; end
  def parse_blocks(css); end
  def setup_parser(css); end
  def to_s; end
end
class Roadie::Selector
  def ==(other); end
  def at_rule?; end
  def initialize(selector, specificity = nil); end
  def inlinable?; end
  def inspect; end
  def pseudo_element?; end
  def pseudo_function?; end
  def selector; end
  def specificity; end
  def to_s; end
  def to_str; end
end
class Roadie::StyleProperty
  def <=>(other); end
  def important; end
  def important?; end
  def initialize(property, value, important, specificity); end
  def inspect; end
  def property; end
  def specificity; end
  def to_s; end
  def value; end
  def value_with_important; end
  include Comparable
end
class Roadie::StyleAttributeBuilder
  def <<(style); end
  def attribute_string; end
  def initialize; end
  def stable_sort(list); end
end
class Roadie::StyleBlock
  def initialize(selector, properties, media); end
  def inlinable?; end
  def inlinable_media?; end
  def media; end
  def properties; end
  def selector; end
  def selector_string(*args, &block); end
  def specificity(*args, &block); end
  def to_s; end
  extend Forwardable
end
module Roadie::AssetProvider
  def find_stylesheet!(name); end
end
class Roadie::ProviderList
  def <<(*args, &block); end
  def each(*args, &block); end
  def empty?(*args, &block); end
  def find_stylesheet!(name); end
  def find_stylesheet(name); end
  def initialize(providers); end
  def last(*args, &block); end
  def pop(*args, &block); end
  def push(*args, &block); end
  def self.empty; end
  def self.wrap(*providers); end
  def shift(*args, &block); end
  def size(*args, &block); end
  def to_ary; end
  def to_s; end
  def unshift(*args, &block); end
  extend Forwardable
  include Enumerable
end
class Roadie::FilesystemProvider
  def build_file_path(name); end
  def find_stylesheet!(name); end
  def find_stylesheet(name); end
  def initialize(path = nil); end
  def inspect; end
  def path; end
  def to_s; end
end
class Roadie::NullProvider
  def empty_stylesheet; end
  def find_stylesheet!(name); end
  def find_stylesheet(name); end
  def inspect; end
  def to_s; end
end
class Roadie::NetHttpProvider
  def access_granted_to?(host); end
  def download(url); end
  def find_stylesheet!(url); end
  def find_stylesheet(url); end
  def get_response(uri); end
  def host_set(hosts); end
  def initialize(options = nil); end
  def inspect; end
  def response_body(response); end
  def to_s; end
  def truncate(string); end
  def validate_host(host); end
  def whitelist; end
end
class Roadie::CachedProvider
  def cache; end
  def cache_fetch(name); end
  def find_stylesheet!(name); end
  def find_stylesheet(name); end
  def initialize(upstream, cache = nil); end
end
class Roadie::PathRewriterProvider
  def filter; end
  def find_stylesheet!(path); end
  def find_stylesheet(path); end
  def initialize(provider, &filter); end
  def provider; end
end
class Roadie::AssetScanner
  def clean_css(css); end
  def dom; end
  def external_asset_provider; end
  def extract_css; end
  def find_css; end
  def initialize(dom, normal_asset_provider, external_asset_provider); end
  def normal_asset_provider; end
  def read_link_element(element); end
  def read_style_element(element); end
  def read_stylesheet(element); end
  def should_find_external?; end
end
class Roadie::MarkupImprover
  def content_type_meta_element_missing?; end
  def create_head_element(parent); end
  def dom; end
  def ensure_declared_charset(parent); end
  def ensure_doctype_present; end
  def ensure_head_element_present; end
  def improve; end
  def initialize(dom, original_html); end
  def make_content_type_element; end
  def uses_buggy_jruby?; end
end
class Roadie::UrlGenerator
  def add_scheme(path); end
  def apply_base(base, path); end
  def build_root_uri; end
  def combine_segments(root, base, path); end
  def generate_url(path, base = nil); end
  def initialize(url_options); end
  def make_absolute(path); end
  def normalize_scheme(scheme); end
  def parse_port(port); end
  def path_is_anchor?(path); end
  def path_is_schemeless?(path); end
  def root_uri; end
  def scheme; end
  def url_options; end
  def validate_options(options); end
end
class Roadie::UrlRewriter
  def generate_url(*args); end
  def initialize(generator); end
  def transform_css(css); end
  def transform_dom(dom); end
  def transform_element(element); end
  def transform_element_style(element); end
end
class Roadie::NullUrlRewriter
  def initialize(generator = nil); end
  def transform_css(css); end
  def transform_dom(dom); end
end
class Roadie::Inliner
  def add_uninlinable_styles(parent, blocks, merge_media_queries); end
  def apply_element_style(element, builder); end
  def apply_style_map(style_map); end
  def consume_stylesheets; end
  def create_style_element(style_blocks, parent, merge_media_queries); end
  def dom; end
  def each_style_block; end
  def elements_matching_selector(stylesheet, selector); end
  def find_head; end
  def initialize(stylesheets, dom); end
  def inline(options = nil); end
  def selector_elements(stylesheet, block); end
  def styles_in_individual_media_queries(style_blocks); end
  def styles_in_shared_media_queries(style_blocks); end
  def stylesheets; end
end
class Roadie::Inliner::StyleMap
  def add(elements, new_properties); end
  def each_element(&block); end
  def initialize; end
end
class Roadie::Document
  def add_css(new_css); end
  def after_transformation; end
  def after_transformation=(arg0); end
  def asset_providers; end
  def asset_providers=(list); end
  def before_transformation; end
  def before_transformation=(arg0); end
  def callback(callable, dom); end
  def external_asset_providers; end
  def external_asset_providers=(list); end
  def html; end
  def improve(dom); end
  def initialize(html); end
  def inline(dom, options = nil); end
  def keep_uninlinable_css; end
  def keep_uninlinable_css=(arg0); end
  def make_url_rewriter; end
  def merge_media_queries; end
  def merge_media_queries=(arg0); end
  def mode; end
  def mode=(mode); end
  def remove_ignore_markers(dom); end
  def rewrite_urls(dom); end
  def serialize_document(dom); end
  def stylesheet; end
  def transform; end
  def transform_partial; end
  def url_options; end
  def url_options=(arg0); end
end
