# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/delayed_job_active_record/all/delayed_job_active_record.rbi
#
# delayed_job_active_record-4.1.3
class Delayed::Backend::ActiveRecord::Configuration
  def initialize; end
  def reserve_sql_strategy; end
  def reserve_sql_strategy=(val); end
end
module Delayed::Backend::ActiveRecord
  def self.configuration; end
  def self.configure; end
end
module Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_21
end
class Delayed::Backend::ActiveRecord::Job < ActiveRecord::Base
  def reload(*args); end
  def self.__callbacks; end
  def self._validators; end
  def self.after_fork; end
  def self.attribute_type_decorations; end
  def self.before_fork; end
  def self.by_priority(*args); end
  def self.clear_locks!(worker_name); end
  def self.db_time_now; end
  def self.defined_enums; end
  def self.for_queues(*args); end
  def self.max_priority(*args); end
  def self.min_priority(*args); end
  def self.ready_to_run(worker_name, max_run_time); end
  def self.reserve(worker, max_run_time = nil); end
  def self.reserve_with_scope(ready_scope, worker, now); end
  def self.reserve_with_scope_using_default_sql(ready_scope, worker, now); end
  def self.reserve_with_scope_using_optimized_mssql(ready_scope, worker, now); end
  def self.reserve_with_scope_using_optimized_mysql(ready_scope, worker, now); end
  def self.reserve_with_scope_using_optimized_postgres(ready_scope, worker, now); end
  def self.reserve_with_scope_using_optimized_sql(ready_scope, worker, now); end
  def self.set_delayed_job_table_name; end
  extend Delayed::Backend::Base::ClassMethods
  include Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_21
  include Delayed::Backend::ActiveRecord::Job::GeneratedAssociationMethods
  include Delayed::Backend::Base
end
module Delayed::Backend::ActiveRecord::Job::GeneratedAssociationMethods
end
class Delayed::Backend::ActiveRecord::Job::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Delayed::Backend::ActiveRecord::Job::GeneratedRelationMethods
end
module Delayed::Backend::ActiveRecord::Job::GeneratedRelationMethods
  def by_priority(*args, &block); end
  def for_queues(*args, &block); end
  def max_priority(*args, &block); end
  def min_priority(*args, &block); end
end
class Delayed::Backend::ActiveRecord::Job::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Delayed::Backend::ActiveRecord::Job::GeneratedRelationMethods
end
class Delayed::Backend::ActiveRecord::Job::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Delayed::Backend::ActiveRecord::Job::GeneratedRelationMethods
end
