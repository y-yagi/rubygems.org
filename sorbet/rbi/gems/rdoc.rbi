# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rdoc/all/rdoc.rbi
#
# rdoc-6.1.1
class RDoc::I18n::Text
  def each_line(raw, &block); end
  def emit_empty_line_event(line, line_no); end
  def emit_paragraph_event(paragraph, paragraph_start_line, line_no, &block); end
  def extract_messages; end
  def initialize(raw); end
  def parse(&block); end
  def translate(locale); end
end
module RDoc
  def self.load_yaml; end
end
class RDoc::Markup
  def add_html(tag, name); end
  def add_regexp_handling(pattern, name); end
  def add_word_pair(start, stop, name); end
  def attribute_manager; end
  def convert(input, formatter); end
  def initialize(attribute_manager = nil); end
  def self.parse(str); end
end
class RDoc::Markup::Formatter::InlineTag < Struct
  def bit; end
  def bit=(_); end
  def off; end
  def off=(_); end
  def on; end
  def on=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class RDoc::Markup::Formatter
  def accept_document(document); end
  def add_regexp_handling_RDOCLINK; end
  def add_regexp_handling_TIDYLINK; end
  def add_tag(name, start, stop); end
  def annotate(tag); end
  def convert(content); end
  def convert_flow(flow); end
  def convert_regexp_handling(target); end
  def convert_string(string); end
  def ignore(*node); end
  def in_tt?; end
  def initialize(options, markup = nil); end
  def off_tags(res, item); end
  def on_tags(res, item); end
  def parse_url(url); end
  def self.gen_relative_url(path, target); end
  def tt?(tag); end
end
class RDoc::Markup::ToJoinedParagraph < RDoc::Markup::Formatter
  def accept_block_quote(*node); end
  def accept_heading(*node); end
  def accept_list_end(*node); end
  def accept_list_item_end(*node); end
  def accept_list_item_start(*node); end
  def accept_list_start(*node); end
  def accept_paragraph(paragraph); end
  def accept_raw(*node); end
  def accept_rule(*node); end
  def accept_verbatim(*node); end
  def end_accepting; end
  def initialize; end
  def start_accepting; end
end
class RDoc::Markdown::Literals
  def _Alphanumeric; end
  def _AlphanumericAscii; end
  def _BOM; end
  def _Newline; end
  def _NonAlphanumeric; end
  def _Spacechar; end
  def apply(rule); end
  def apply_with_args(rule, *args); end
  def current_column(target = nil); end
  def current_line(target = nil); end
  def external_invoke(other, rule, *args); end
  def failed_rule; end
  def failing_rule_offset; end
  def failure_caret; end
  def failure_character; end
  def failure_info; end
  def failure_oneline; end
  def get_byte; end
  def get_text(start); end
  def grow_lr(rule, args, start_pos, m); end
  def initialize(str, debug = nil); end
  def lines; end
  def match_string(str); end
  def parse(rule = nil); end
  def pos; end
  def pos=(arg0); end
  def raise_error; end
  def result; end
  def result=(arg0); end
  def scan(reg); end
  def self.rule_info(name, rendered); end
  def set_failed_rule(name); end
  def set_string(string, pos); end
  def setup_foreign_grammar; end
  def setup_parser(str, debug = nil); end
  def show_error(io = nil); end
  def show_pos; end
  def string; end
end
class RDoc::Markdown::Literals::MemoEntry
  def ans; end
  def initialize(ans, pos); end
  def left_rec; end
  def left_rec=(arg0); end
  def move!(ans, pos, result); end
  def pos; end
  def result; end
  def set; end
end
class RDoc::Markdown::Literals::RuleInfo
  def initialize(name, rendered); end
  def name; end
  def rendered; end
end
class RDoc::Markdown
  def _Alphanumeric; end
  def _AlphanumericAscii; end
  def _AtxHeading; end
  def _AtxInline; end
  def _AtxStart; end
  def _AutoLink; end
  def _AutoLinkEmail; end
  def _AutoLinkUrl; end
  def _BOM; end
  def _BlankLine; end
  def _Block; end
  def _BlockQuote; end
  def _BlockQuoteRaw; end
  def _Bullet; end
  def _BulletList; end
  def _CharEntity; end
  def _Code; end
  def _CodeFence; end
  def _DecEntity; end
  def _DefinitionList; end
  def _DefinitionListDefinition; end
  def _DefinitionListItem; end
  def _DefinitionListLabel; end
  def _Digit; end
  def _Doc; end
  def _Emph; end
  def _EmphStar; end
  def _EmphUl; end
  def _EmptyTitle; end
  def _Endline; end
  def _Entity; end
  def _Enumerator; end
  def _Eof; end
  def _EscapedChar; end
  def _ExplicitLink; end
  def _ExtendedSpecialChar; end
  def _Heading; end
  def _HexEntity; end
  def _HorizontalRule; end
  def _HtmlAnchor; end
  def _HtmlAttribute; end
  def _HtmlBlock; end
  def _HtmlBlockAddress; end
  def _HtmlBlockBlockquote; end
  def _HtmlBlockCenter; end
  def _HtmlBlockCloseAddress; end
  def _HtmlBlockCloseBlockquote; end
  def _HtmlBlockCloseCenter; end
  def _HtmlBlockCloseDd; end
  def _HtmlBlockCloseDir; end
  def _HtmlBlockCloseDiv; end
  def _HtmlBlockCloseDl; end
  def _HtmlBlockCloseDt; end
  def _HtmlBlockCloseFieldset; end
  def _HtmlBlockCloseForm; end
  def _HtmlBlockCloseFrameset; end
  def _HtmlBlockCloseH1; end
  def _HtmlBlockCloseH2; end
  def _HtmlBlockCloseH3; end
  def _HtmlBlockCloseH4; end
  def _HtmlBlockCloseH5; end
  def _HtmlBlockCloseH6; end
  def _HtmlBlockCloseHead; end
  def _HtmlBlockCloseLi; end
  def _HtmlBlockCloseMenu; end
  def _HtmlBlockCloseNoframes; end
  def _HtmlBlockCloseNoscript; end
  def _HtmlBlockCloseOl; end
  def _HtmlBlockCloseP; end
  def _HtmlBlockClosePre; end
  def _HtmlBlockCloseScript; end
  def _HtmlBlockCloseTable; end
  def _HtmlBlockCloseTbody; end
  def _HtmlBlockCloseTd; end
  def _HtmlBlockCloseTfoot; end
  def _HtmlBlockCloseTh; end
  def _HtmlBlockCloseThead; end
  def _HtmlBlockCloseTr; end
  def _HtmlBlockCloseUl; end
  def _HtmlBlockDd; end
  def _HtmlBlockDir; end
  def _HtmlBlockDiv; end
  def _HtmlBlockDl; end
  def _HtmlBlockDt; end
  def _HtmlBlockFieldset; end
  def _HtmlBlockForm; end
  def _HtmlBlockFrameset; end
  def _HtmlBlockH1; end
  def _HtmlBlockH2; end
  def _HtmlBlockH3; end
  def _HtmlBlockH4; end
  def _HtmlBlockH5; end
  def _HtmlBlockH6; end
  def _HtmlBlockHead; end
  def _HtmlBlockInTags; end
  def _HtmlBlockLi; end
  def _HtmlBlockMenu; end
  def _HtmlBlockNoframes; end
  def _HtmlBlockNoscript; end
  def _HtmlBlockOl; end
  def _HtmlBlockOpenAddress; end
  def _HtmlBlockOpenBlockquote; end
  def _HtmlBlockOpenCenter; end
  def _HtmlBlockOpenDd; end
  def _HtmlBlockOpenDir; end
  def _HtmlBlockOpenDiv; end
  def _HtmlBlockOpenDl; end
  def _HtmlBlockOpenDt; end
  def _HtmlBlockOpenFieldset; end
  def _HtmlBlockOpenForm; end
  def _HtmlBlockOpenFrameset; end
  def _HtmlBlockOpenH1; end
  def _HtmlBlockOpenH2; end
  def _HtmlBlockOpenH3; end
  def _HtmlBlockOpenH4; end
  def _HtmlBlockOpenH5; end
  def _HtmlBlockOpenH6; end
  def _HtmlBlockOpenHead; end
  def _HtmlBlockOpenLi; end
  def _HtmlBlockOpenMenu; end
  def _HtmlBlockOpenNoframes; end
  def _HtmlBlockOpenNoscript; end
  def _HtmlBlockOpenOl; end
  def _HtmlBlockOpenP; end
  def _HtmlBlockOpenPre; end
  def _HtmlBlockOpenScript; end
  def _HtmlBlockOpenTable; end
  def _HtmlBlockOpenTbody; end
  def _HtmlBlockOpenTd; end
  def _HtmlBlockOpenTfoot; end
  def _HtmlBlockOpenTh; end
  def _HtmlBlockOpenThead; end
  def _HtmlBlockOpenTr; end
  def _HtmlBlockOpenUl; end
  def _HtmlBlockP; end
  def _HtmlBlockPre; end
  def _HtmlBlockScript; end
  def _HtmlBlockSelfClosing; end
  def _HtmlBlockTable; end
  def _HtmlBlockTbody; end
  def _HtmlBlockTd; end
  def _HtmlBlockTfoot; end
  def _HtmlBlockTh; end
  def _HtmlBlockThead; end
  def _HtmlBlockTr; end
  def _HtmlBlockType; end
  def _HtmlBlockUl; end
  def _HtmlCloseAnchor; end
  def _HtmlComment; end
  def _HtmlOpenAnchor; end
  def _HtmlTag; end
  def _HtmlUnclosed; end
  def _HtmlUnclosedType; end
  def _Image; end
  def _InStyleTags; end
  def _Indent; end
  def _IndentedLine; end
  def _Inline; end
  def _InlineNote; end
  def _Inlines; end
  def _Label; end
  def _Line; end
  def _LineBreak; end
  def _Link; end
  def _ListBlock; end
  def _ListBlockLine; end
  def _ListContinuationBlock; end
  def _ListItem; end
  def _ListItemTight; end
  def _ListLoose; end
  def _ListTight; end
  def _Newline; end
  def _NonblankIndentedLine; end
  def _NonindentSpace; end
  def _Nonspacechar; end
  def _NormalChar; end
  def _NormalEndline; end
  def _Note; end
  def _NoteReference; end
  def _Notes; end
  def _OptionallyIndentedLine; end
  def _OrderedList; end
  def _Para; end
  def _Plain; end
  def _Quoted; end
  def _RawHtml; end
  def _RawLine; end
  def _RawNoteBlock; end
  def _RawNoteReference; end
  def _RefSrc; end
  def _RefTitle; end
  def _RefTitleDouble; end
  def _RefTitleParens; end
  def _RefTitleSingle; end
  def _Reference; end
  def _ReferenceLink; end
  def _ReferenceLinkDouble; end
  def _ReferenceLinkSingle; end
  def _References; end
  def _SetextBottom1; end
  def _SetextBottom2; end
  def _SetextHeading1; end
  def _SetextHeading2; end
  def _SetextHeading; end
  def _SkipBlock; end
  def _Source; end
  def _SourceContents; end
  def _Sp; end
  def _Space; end
  def _Spacechar; end
  def _SpecialChar; end
  def _Spnl; end
  def _StarLine; end
  def _StartList; end
  def _Str; end
  def _StrChunk; end
  def _Strike; end
  def _Strong; end
  def _StrongStar; end
  def _StrongUl; end
  def _StyleBlock; end
  def _StyleClose; end
  def _StyleOpen; end
  def _Symbol; end
  def _TerminalEndline; end
  def _Ticks1; end
  def _Ticks2; end
  def _Ticks3; end
  def _Ticks4; end
  def _Ticks5; end
  def _Title; end
  def _TitleDouble; end
  def _TitleSingle; end
  def _UlLine; end
  def _UlOrStarLine; end
  def _Verbatim; end
  def _VerbatimChunk; end
  def _Whitespace; end
  def _root; end
  def apply(rule); end
  def apply_with_args(rule, *args); end
  def break_on_newline=(enable); end
  def break_on_newline?; end
  def css=(enable); end
  def css?; end
  def current_column(target = nil); end
  def current_line(target = nil); end
  def definition_lists=(enable); end
  def definition_lists?; end
  def emphasis(text); end
  def extension(name, enable); end
  def extension?(name); end
  def external_invoke(other, rule, *args); end
  def failed_rule; end
  def failing_rule_offset; end
  def failure_caret; end
  def failure_character; end
  def failure_info; end
  def failure_oneline; end
  def get_byte; end
  def get_text(start); end
  def github=(enable); end
  def github?; end
  def grow_lr(rule, args, start_pos, m); end
  def html=(enable); end
  def html?; end
  def initialize(extensions = nil, debug = nil); end
  def inner_parse(text); end
  def lines; end
  def link_to(content, label = nil, text = nil); end
  def list_item_from(unparsed); end
  def match_string(str); end
  def note(label); end
  def note_for(ref); end
  def notes=(enable); end
  def notes?; end
  def orig_initialize(str, debug = nil); end
  def paragraph(parts); end
  def parse(markdown); end
  def peg_parse(rule = nil); end
  def pos; end
  def pos=(arg0); end
  def raise_error; end
  def reference(label, link); end
  def result; end
  def result=(arg0); end
  def scan(reg); end
  def self.extension(name); end
  def self.parse(markdown); end
  def self.rule_info(name, rendered); end
  def set_failed_rule(name); end
  def set_string(string, pos); end
  def setup_foreign_grammar; end
  def setup_parser(str, debug = nil); end
  def show_error(io = nil); end
  def show_pos; end
  def strike(text); end
  def strike=(enable); end
  def strike?; end
  def string; end
  def strong(text); end
end
class RDoc::Markdown::MemoEntry
  def ans; end
  def initialize(ans, pos); end
  def left_rec; end
  def left_rec=(arg0); end
  def move!(ans, pos, result); end
  def pos; end
  def result; end
  def set; end
end
class RDoc::Markdown::RuleInfo
  def initialize(name, rendered); end
  def name; end
  def rendered; end
end
class RDoc::RD
  def self.parse(rd); end
end
class RDoc::Markup::Parser
  def build_heading(level); end
  def build_list(margin); end
  def build_paragraph(margin); end
  def build_verbatim(margin); end
  def char_pos(byte_offset); end
  def debug; end
  def debug=(arg0); end
  def get; end
  def initialize; end
  def parse(parent, indent = nil); end
  def parse_text(parent, indent); end
  def peek_token; end
  def self.parse(str); end
  def self.tokenize(str); end
  def setup_scanner(input); end
  def skip(token_type, error = nil); end
  def token_pos(byte_offset); end
  def tokenize(input); end
  def tokens; end
  def unget; end
  include RDoc::Text
end
class RDoc::Markup::PreProcess
  def find_include_file(name); end
  def handle(text, code_object = nil, &block); end
  def handle_directive(prefix, directive, param, code_object = nil, encoding = nil); end
  def include_file(name, indent, encoding); end
  def initialize(input_file_name, include_path); end
  def options; end
  def options=(arg0); end
  def self.post_process(&block); end
  def self.post_processors; end
  def self.register(directive, &block); end
  def self.registered; end
  def self.reset; end
end
class RDoc::TomDoc < RDoc::Markup::Parser
  def build_heading(level); end
  def build_paragraph(margin); end
  def build_verbatim(margin); end
  def initialize; end
  def parse_text(parent, indent); end
  def self.add_post_processor; end
  def self.parse(text); end
  def self.signature(comment); end
  def tokenize(text); end
  def tokens; end
end
module RDoc::Text
  def expand_tabs(text); end
  def flush_left(text); end
  def markup(text); end
  def normalize_comment(text); end
  def parse(text, format = nil); end
  def self.encode_fallback(character, encoding, fallback); end
  def snippet(text, limit = nil); end
  def strip_hashes(text); end
  def strip_newlines(text); end
  def strip_stars(text); end
  def to_html(text); end
  def wrap(txt, line_len = nil); end
end
class RDoc::Markup::ToHtml < RDoc::Markup::Formatter
  def accept_blank_line(blank_line); end
  def accept_block_quote(block_quote); end
  def accept_heading(heading); end
  def accept_list_end(list); end
  def accept_list_item_end(list_item); end
  def accept_list_item_start(list_item); end
  def accept_list_start(list); end
  def accept_paragraph(paragraph); end
  def accept_raw(raw); end
  def accept_rule(rule); end
  def accept_verbatim(verbatim); end
  def code_object; end
  def code_object=(arg0); end
  def convert_string(text); end
  def end_accepting; end
  def from_path; end
  def from_path=(arg0); end
  def gen_url(url, text); end
  def handle_RDOCLINK(url); end
  def handle_regexp_HARD_BREAK(target); end
  def handle_regexp_HYPERLINK(target); end
  def handle_regexp_RDOCLINK(target); end
  def handle_regexp_TIDYLINK(target); end
  def html_list_name(list_type, open_tag); end
  def in_list_entry; end
  def init_tags; end
  def initialize(options, markup = nil); end
  def list; end
  def list_end_for(list_type); end
  def list_item_start(list_item, list_type); end
  def parseable?(text); end
  def res; end
  def start_accepting; end
  def to_html(item); end
  include RDoc::Text
end
class RDoc::Options
  def ==(other); end
  def charset; end
  def charset=(arg0); end
  def check_files; end
  def check_generator; end
  def coverage_report; end
  def coverage_report=(arg0); end
  def default_title=(string); end
  def dry_run; end
  def dry_run=(arg0); end
  def encode_with(coder); end
  def encoding; end
  def encoding=(arg0); end
  def exclude; end
  def exclude=(arg0); end
  def files; end
  def files=(arg0); end
  def finish; end
  def finish_page_dir; end
  def force_output; end
  def force_output=(arg0); end
  def force_update; end
  def force_update=(arg0); end
  def formatter; end
  def formatter=(arg0); end
  def generator; end
  def generator=(arg0); end
  def generator_descriptions; end
  def generator_name; end
  def generator_options; end
  def generator_options=(arg0); end
  def hyperlink_all; end
  def hyperlink_all=(arg0); end
  def init_ivars; end
  def init_with(map); end
  def initialize; end
  def line_numbers; end
  def line_numbers=(arg0); end
  def locale; end
  def locale=(arg0); end
  def locale_dir; end
  def locale_dir=(arg0); end
  def main_page; end
  def main_page=(arg0); end
  def markup; end
  def markup=(arg0); end
  def op_dir; end
  def op_dir=(arg0); end
  def option_parser; end
  def option_parser=(arg0); end
  def output_decoration; end
  def output_decoration=(arg0); end
  def page_dir; end
  def page_dir=(arg0); end
  def parse(argv); end
  def pipe; end
  def pipe=(arg0); end
  def quiet; end
  def quiet=(bool); end
  def rdoc_include; end
  def rdoc_include=(arg0); end
  def root; end
  def root=(arg0); end
  def sanitize_path(path); end
  def setup_generator(generator_name = nil); end
  def show_hash; end
  def show_hash=(arg0); end
  def static_path; end
  def static_path=(arg0); end
  def tab_width; end
  def tab_width=(arg0); end
  def template; end
  def template=(arg0); end
  def template_dir; end
  def template_dir=(arg0); end
  def template_dir_for(template); end
  def template_stylesheets; end
  def template_stylesheets=(arg0); end
  def title; end
  def title=(arg0); end
  def update_output_dir; end
  def update_output_dir=(arg0); end
  def verbosity; end
  def verbosity=(arg0); end
  def visibility; end
  def visibility=(visibility); end
  def warn(message); end
  def webcvs; end
  def webcvs=(arg0); end
  def write_options; end
  def yaml_initialize(tag, map); end
end
