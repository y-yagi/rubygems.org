# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/elasticsearch-api/all/elasticsearch-api.rbi
#
# elasticsearch-api-5.0.5
module Elasticsearch::API::Common::Client::Base
  def client; end
  def initialize(client); end
end
module Elasticsearch::API::Common::Client
  def perform_request(method, path, params = nil, body = nil); end
end
module Elasticsearch::API::Utils
  def __bulkify(payload); end
  def __escape(string); end
  def __extract_params(arguments, params = nil, options = nil); end
  def __extract_parts(arguments, valid_parts = nil); end
  def __listify(*list); end
  def __pathify(*segments); end
  def __report_unsupported_method(name); end
  def __report_unsupported_parameters(arguments, params = nil); end
  def __rescue_from_not_found(&block); end
  def __validate_and_extract_params(arguments, params = nil, options = nil); end
  def __validate_params(arguments, valid_params = nil); end
  extend Elasticsearch::API::Utils
end
module Elasticsearch::API::Actions
  def abort_benchmark(arguments = nil); end
  def benchmark(arguments = nil); end
  def bulk(arguments = nil); end
  def clear_scroll(arguments = nil); end
  def count(arguments = nil); end
  def count_percolate(arguments = nil); end
  def create(arguments = nil); end
  def delete(arguments = nil); end
  def delete_by_query(arguments = nil); end
  def delete_script(arguments = nil); end
  def delete_template(arguments = nil); end
  def exists(arguments = nil); end
  def exists?(arguments = nil); end
  def explain(arguments = nil); end
  def field_caps(arguments = nil); end
  def field_stats(arguments = nil); end
  def get(arguments = nil); end
  def get_script(arguments = nil); end
  def get_source(arguments = nil); end
  def get_template(arguments = nil); end
  def index(arguments = nil); end
  def info(arguments = nil); end
  def list_benchmarks(arguments = nil); end
  def mget(arguments = nil); end
  def mlt(arguments = nil); end
  def mpercolate(arguments = nil); end
  def msearch(arguments = nil); end
  def mtermvectors(arguments = nil); end
  def percolate(arguments = nil); end
  def ping(arguments = nil); end
  def put_script(arguments = nil); end
  def put_template(arguments = nil); end
  def reindex(arguments = nil); end
  def render_search_template(arguments = nil); end
  def scroll(arguments = nil); end
  def search(arguments = nil); end
  def search_exists(arguments = nil); end
  def search_shards(arguments = nil); end
  def search_template(arguments = nil); end
  def suggest(arguments = nil); end
  def termvector(arguments = nil); end
  def termvectors(arguments = nil); end
  def update(arguments = nil); end
  def update_by_query(arguments = nil); end
end
module Elasticsearch::API::Remote::Actions
  def info(arguments = nil); end
end
module Elasticsearch::API::Tasks::Actions
  def cancel(arguments = nil); end
  def get(arguments = nil); end
  def list(arguments = nil); end
end
module Elasticsearch::API::Snapshot::Actions
  def create(arguments = nil); end
  def create_repository(arguments = nil); end
  def delete(arguments = nil); end
  def delete_repository(arguments = nil); end
  def get(arguments = nil); end
  def get_repository(arguments = nil); end
  def restore(arguments = nil); end
  def status(arguments = nil); end
  def verify_repository(arguments = nil); end
end
module Elasticsearch::API::Nodes::Actions
  def hot_threads(arguments = nil); end
  def info(arguments = nil); end
  def shutdown(arguments = nil); end
  def stats(arguments = nil); end
end
module Elasticsearch::API::Cat::Actions
  def aliases(arguments = nil); end
  def allocation(arguments = nil); end
  def count(arguments = nil); end
  def fielddata(arguments = nil); end
  def health(arguments = nil); end
  def help(arguments = nil); end
  def indices(arguments = nil); end
  def master(arguments = nil); end
  def nodeattrs(arguments = nil); end
  def nodes(arguments = nil); end
  def pending_tasks(arguments = nil); end
  def plugins(arguments = nil); end
  def recovery(arguments = nil); end
  def repositories(arguments = nil); end
  def segments(arguments = nil); end
  def shards(arguments = nil); end
  def snapshots(arguments = nil); end
  def tasks(arguments = nil); end
  def templates(arguments = nil); end
  def thread_pool(arguments = nil); end
end
module Elasticsearch::API::Indices::Actions
  def analyze(arguments = nil); end
  def clear_cache(arguments = nil); end
  def close(arguments = nil); end
  def create(arguments = nil); end
  def delete(arguments = nil); end
  def delete_alias(arguments = nil); end
  def delete_mapping(arguments = nil); end
  def delete_template(arguments = nil); end
  def delete_warmer(arguments = nil); end
  def exists(arguments = nil); end
  def exists?(arguments = nil); end
  def exists_alias(arguments = nil); end
  def exists_alias?(arguments = nil); end
  def exists_template(arguments = nil); end
  def exists_template?(arguments = nil); end
  def exists_type(arguments = nil); end
  def exists_type?(arguments = nil); end
  def flush(arguments = nil); end
  def flush_synced(arguments = nil); end
  def forcemerge(arguments = nil); end
  def get(arguments = nil); end
  def get_alias(arguments = nil); end
  def get_aliases(arguments = nil); end
  def get_field_mapping(arguments = nil); end
  def get_mapping(arguments = nil); end
  def get_settings(arguments = nil); end
  def get_template(arguments = nil); end
  def get_warmer(arguments = nil); end
  def open(arguments = nil); end
  def optimize(arguments = nil); end
  def put_alias(arguments = nil); end
  def put_mapping(arguments = nil); end
  def put_settings(arguments = nil); end
  def put_template(arguments = nil); end
  def put_warmer(arguments = nil); end
  def recovery(arguments = nil); end
  def refresh(arguments = nil); end
  def rollover(arguments = nil); end
  def seal(arguments = nil); end
  def segments(arguments = nil); end
  def shard_stores(arguments = nil); end
  def shrink(arguments = nil); end
  def snapshot_index(arguments = nil); end
  def stats(arguments = nil); end
  def status(arguments = nil); end
  def update_aliases(arguments = nil); end
  def upgrade(arguments = nil); end
  def validate_query(arguments = nil); end
end
module Elasticsearch::API::Ingest::Actions
  def delete_pipeline(arguments = nil); end
  def get_pipeline(arguments = nil); end
  def put_pipeline(arguments = nil); end
  def simulate(arguments = nil); end
end
module Elasticsearch::API::Cluster::Actions
  def allocation_explain(arguments = nil); end
  def get_settings(arguments = nil); end
  def health(arguments = nil); end
  def pending_tasks(arguments = nil); end
  def put_settings(arguments = nil); end
  def reroute(arguments = nil); end
  def state(arguments = nil); end
  def stats(arguments = nil); end
end
class Elasticsearch::API::Tasks::TasksClient
  include Elasticsearch::API::Common::Client
end
module Elasticsearch::API::Tasks
  def tasks; end
end
class Elasticsearch::API::Nodes::NodesClient
  include Elasticsearch::API::Common::Client
end
module Elasticsearch::API::Nodes
  def nodes; end
end
class Elasticsearch::API::Snapshot::SnapshotClient
  include Elasticsearch::API::Common::Client
end
module Elasticsearch::API::Snapshot
  def snapshot; end
end
class Elasticsearch::API::Cluster::ClusterClient
  include Elasticsearch::API::Common::Client
end
module Elasticsearch::API::Cluster
  def cluster; end
end
class Elasticsearch::API::Indices::IndicesClient
  include Elasticsearch::API::Common::Client
end
module Elasticsearch::API::Indices
  def indices; end
end
class Elasticsearch::API::Cat::CatClient
  include Elasticsearch::API::Common::Client
end
module Elasticsearch::API::Cat
  def cat; end
end
class Elasticsearch::API::Remote::RemoteClient
  include Elasticsearch::API::Common::Client
end
module Elasticsearch::API::Remote
  def remote; end
end
class Elasticsearch::API::Ingest::IngestClient
  include Elasticsearch::API::Common::Client
end
module Elasticsearch::API::Ingest
  def ingest; end
end
module Elasticsearch::API
  def self.included(base); end
  def self.serializer; end
  def self.settings; end
end
