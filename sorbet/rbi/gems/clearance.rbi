# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/clearance/all/clearance.rbi
#
# clearance-1.17.0
class Clearance::Configuration
  def allow_sign_up=(arg0); end
  def allow_sign_up?; end
  def allowed_backdoor_environments; end
  def allowed_backdoor_environments=(arg0); end
  def cookie_domain; end
  def cookie_domain=(arg0); end
  def cookie_expiration; end
  def cookie_expiration=(arg0); end
  def cookie_name; end
  def cookie_name=(arg0); end
  def cookie_path; end
  def cookie_path=(arg0); end
  def httponly; end
  def httponly=(arg0); end
  def initialize; end
  def mailer_sender; end
  def mailer_sender=(arg0); end
  def password_strategy; end
  def password_strategy=(arg0); end
  def redirect_url; end
  def redirect_url=(arg0); end
  def reload_user_model; end
  def rotate_csrf_on_sign_in; end
  def rotate_csrf_on_sign_in=(arg0); end
  def rotate_csrf_on_sign_in?; end
  def routes=(arg0); end
  def routes_enabled?; end
  def secure_cookie; end
  def secure_cookie=(arg0); end
  def sign_in_guards; end
  def sign_in_guards=(arg0); end
  def user_actions; end
  def user_id_parameter; end
  def user_model; end
  def user_model=(arg0); end
  def user_parameter; end
end
module Clearance
  def self.configuration; end
  def self.configuration=(config); end
  def self.configure; end
  def self.root; end
end
class Clearance::SuccessStatus
  def success?; end
end
class Clearance::FailureStatus
  def failure_message; end
  def initialize(failure_message); end
  def success?; end
end
class Clearance::SignInGuard
  def current_user; end
  def failure(message); end
  def initialize(session, stack = nil); end
  def next_guard; end
  def session; end
  def signed_in?; end
  def stack; end
  def success; end
end
class Clearance::DefaultSignInGuard < Clearance::SignInGuard
  def call; end
  def default_failure_message; end
end
class Clearance::Session
  def add_cookie_to_headers(headers); end
  def cookie_options; end
  def cookies; end
  def current_user; end
  def expires_configuration; end
  def initialize(env); end
  def initialize_sign_in_guard_stack; end
  def remember_token; end
  def remember_token_cookie; end
  def remember_token_expires; end
  def run_sign_in_stack; end
  def sign_in(user); end
  def sign_out; end
  def signed_in?; end
  def signed_in_with_remember_token?; end
  def signed_out?; end
  def user_from_remember_token(token); end
end
class Clearance::RackSession
  def call(env); end
  def initialize(app); end
end
class Clearance::BackDoor
  def allowed_environments; end
  def call(env); end
  def environment_is_allowed?; end
  def error_message; end
  def find_user(user_param); end
  def initialize(app, &block); end
  def sign_in_through_the_back_door(env); end
end
module Clearance::Authentication
  def authenticate(params); end
  def clearance_session; end
  def current_user; end
  def current_user=(user); end
  def handle_unverified_request; end
  def sign_in(user, &block); end
  def sign_out; end
  def signed_in?; end
  def signed_out?; end
  extend ActiveSupport::Concern
end
module Clearance::Authorization
  def authorize; end
  def clear_return_to; end
  def deny_access(flash_message = nil); end
  def redirect_back_or(default); end
  def redirect_request(flash_message); end
  def require_login; end
  def return_to; end
  def return_to_url; end
  def store_location; end
  def url_after_denied_access_when_signed_in; end
  def url_after_denied_access_when_signed_out; end
  extend ActiveSupport::Concern
end
module Clearance::Controller
  extend ActiveSupport::Concern
  include Clearance::Authentication
  include Clearance::Authorization
end
class Clearance::Token
  def self.new; end
end
module Clearance::User
  def email_optional?; end
  def forgot_password!; end
  def generate_confirmation_token; end
  def generate_remember_token; end
  def normalize_email; end
  def password_optional?; end
  def reset_remember_token!; end
  def skip_password_validation?; end
  def update_password(new_password); end
  extend ActiveSupport::Concern
end
module Clearance::User::ClassMethods
  def authenticate(email, password); end
  def find_by_normalized_email(email); end
  def normalize_email(email); end
  def password_strategy; end
end
module Clearance::User::Validations
  extend ActiveSupport::Concern
end
module Clearance::User::Callbacks
  extend ActiveSupport::Concern
end
class Clearance::Constraints::SignedIn
  def clearance_session; end
  def current_user; end
  def current_user_fulfills_additional_requirements?; end
  def initialize(&block); end
  def matches?(request); end
  def signed_in?; end
end
class Clearance::Constraints::SignedOut
  def clearance_session; end
  def matches?(request); end
  def missing_session?; end
end
module Clearance::PasswordStrategies::Blowfish
  def authenticated?(password); end
  def encrypt(string); end
  def generate_hash(string); end
  def generate_salt; end
  def initialize_salt_if_necessary; end
  def password=(new_password); end
end
module Clearance::PasswordStrategies::SHA1
  def authenticated?(password); end
  def encrypt(string); end
  def generate_hash(string); end
  def generate_salt; end
  def initialize_salt_if_necessary; end
  def password=(new_password); end
  extend ActiveSupport::Concern
end
module Clearance::PasswordStrategies::BCrypt
  def authenticated?(password); end
  def password=(new_password); end
end
class Clearance::PasswordStrategies::BCryptMigrationFromSHA1::BCryptUser
  def encrypted_password(*args, &block); end
  def encrypted_password=(arg); end
  def initialize(user); end
  include Clearance::PasswordStrategies::BCrypt
end
class Clearance::PasswordStrategies::BCryptMigrationFromSHA1::SHA1User
  def encrypted_password(*args, &block); end
  def encrypted_password=(arg); end
  def initialize(user); end
  def salt(*args, &block); end
  def salt=(arg); end
  include Clearance::PasswordStrategies::SHA1
end
module Clearance::PasswordStrategies::BCryptMigrationFromSHA1
  def authenticated?(password); end
  def authenticated_with_bcrypt?(password); end
  def authenticated_with_sha1?(password); end
  def password=(new_password); end
  def sha1_password?; end
end
module Clearance::Testing::Matchers
  def deny_access(opts = nil); end
end
class Clearance::Testing::Matchers::DenyAccessMatcher
  def clearance_session; end
  def denied_access_url; end
  def description; end
  def failure_message; end
  def failure_message_for_should; end
  def failure_message_for_should_not; end
  def failure_message_when_negated; end
  def flash_notice; end
  def flash_notice_value; end
  def initialize(context, opts); end
  def matches?(controller); end
  def redirects_to_url?; end
  def sets_the_flash?; end
end
module Clearance::Testing::ControllerHelpers
  def factory_module(provider); end
  def setup_controller_request_and_response; end
  def sign_in; end
  def sign_in_as(user); end
  def sign_out; end
end
class ActionController::TestCase < ActiveSupport::TestCase
  extend Clearance::Testing::Matchers
  include Clearance::Testing::ControllerHelpers
end
