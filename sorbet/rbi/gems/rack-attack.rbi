# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rack-attack/all/rack-attack.rbi
#
# rack-attack-6.0.0
module Rack::Attack::FallbackPathNormalizer
  def self.normalize_path(path); end
end
class Rack::Attack
  def blocklisted?(*args, &block); end
  def call(env); end
  def initialize(app); end
  def safelisted?(*args, &block); end
  def self.anonymous_blocklists; end
  def self.anonymous_blocklists=(arg0); end
  def self.anonymous_safelists; end
  def self.anonymous_safelists=(arg0); end
  def self.blocklist(name = nil, &block); end
  def self.blocklist_ip(ip_address); end
  def self.blocklisted?(request); end
  def self.blocklisted_response; end
  def self.blocklisted_response=(arg0); end
  def self.blocklists; end
  def self.cache; end
  def self.clear!; end
  def self.clear_configuration; end
  def self.instrument(request); end
  def self.notifier; end
  def self.notifier=(arg0); end
  def self.safelist(name = nil, &block); end
  def self.safelist_ip(ip_address); end
  def self.safelisted?(request); end
  def self.safelists; end
  def self.throttle(name, options, &block); end
  def self.throttled?(request); end
  def self.throttled_response; end
  def self.throttled_response=(arg0); end
  def self.throttles; end
  def self.track(name, options = nil, &block); end
  def self.tracked?(request); end
  def self.tracks; end
  def throttled?(*args, &block); end
  def tracked?(*args, &block); end
  extend Forwardable
end
class Rack::Attack::Throttle
  def block; end
  def cache; end
  def initialize(name, options, &block); end
  def limit; end
  def matched_by?(request); end
  def name; end
  def period; end
  def type; end
end
